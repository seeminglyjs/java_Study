finalize 메서드란

자바의 모든 클래스는 최상위 클래스인 Object 클래스의 여러 메서드를 포함하고 있는데요. 
객체 소멸자라고 말하는 finalize 메서드도 그 메서드들 중 하나입니다. 
리소스 누수(leak)를 방지하기 위해 자바 가상 머신(Java Virtual Machine)이 실행하는 가비지 컬렉션이 수행될 때 
더 이상 사용하지 않는 자원에 대한 정리 작업을 진행하기 위해 호출되는 종료자 메서드입니다.

class ObjA {
    private int id;

    public ObjA(int id) {
        this.id = id;
        System.out.println("Call ObjA Constructor");
    }

    public void finalize() {
        System.out.println("Call ObjA Destructor");
    }
}

class ObjB extends ObjA {
    private String name;

    public ObjB(int id, String name) {
        super(id);
        this.name = name;
        System.out.println("Call ObjB Constructor");
    }

    public void finalize() {
        System.out.println("Call ObjB Destructor");
        super.finalize();
    }
}

public class Test {
    public static void main(String[] args) {
        ObjB obj = new ObjB(3, "madplay");
        obj.finalize();
    }
}

자바는 자동으로 상위 클래스의 종료자가 호출되지 않기 때문에 super.finalize(); 코드를 통해서 명시적으로 상위 클래스의 종료자를 호출해야 합니다.

위의 코드를 실행해보면 종료자를 멀리해야 하는 이유를 알 수 있는데요. <Effective Java> 서적에서는 finalize 메서드 사용에 대해서 다음과 같이 언급하고 있습니다.

"종료자는 사용하면 안 된다. 예측이 불가능하고 대체로 위험하고 일반적으로 필요하지 않다."
자바의 finalize 메서드는 위에서 살펴본 것처럼 실행을 보장하지 않습니다. 이러한 특성을 가진 종료자 메서드에서 스트림을 닫는 행위를 하면 치명적일 수 있습니다.

class TestObject {
    /* Stream 변수, 메서드 선언 생략 */

    protected void finalize() throws Throwable {
        try {
            if ( fileStream != null) fileStream.close();
        } finally {
            super.finalize();
        }
    }
}

참고 링크 : https://madplay.github.io/post/java-finalize
