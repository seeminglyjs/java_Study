
package JavaInheritanceStudy;

////자바 상속 개념을 정리하자
//class cal{
//	public int sum (int v1, int v2) {
//		return v1+v2;
//		}
//	
//	public int sum (int v1, int v2, int v3) {
//		return this.sum(v1, v2)+v3;
//		//this는 자기자신을 가르킨다.
//	}
//}	
////메소드의 이름이 같아도 형이 다르면 오류가 발생하지 않으며, 이를
////Overloading이라고 한다.
//
//
//class cal3 extends cal{
//	public int minus (int v1, int v2) {
//		return v1-v2;
//	}
//	public int sum (int v1, int v2) {
//		System.out.println("cal3");	
//		return super.sum(v1, v2);
//		//super 부모를 가르킨다.	
//	}	
//}
////상속의 확장 방법 class에 extends 를 선언한다.
////상속은 클래스가 가지고 있는 변수와 메소드를 모두 사용할 수 있게 해주며,
////재사용성 가독성 을 높이고 코드양을 줄일수 잇다.
////상속받은 클래스는 부모의 메소드를 재정의 할 수 있다.
////이를 Overriding이라고 한다.
//
//public class JavaInheritanceStudy {
//
//	public static void main(String[] args) {
//		
//		cal c = new cal();
//		System.out.println(c.sum(2,1));
//////////////////////////////////////////////////////////		
//		cal3 c3 = new cal3();
//		System.out.println(c3.sum(2,1));
//		System.out.println(c3.minus(2,1));
//	}
//
//}


//자바 상속 개념을 정리하자
class cal{
	int v1,v2;
	cal(int v1, int v2){
		System.out.println("cal");
		this.v1 = v1; this.v2 = v2;
	
	}
	public int sum() {return this.v1+v2;}
}	
class cal3 extends cal{

	cal3(int v1, int v2) {
		super(v1, v2);
		System.out.println("cal3 !!");
		// TODO Auto-generated constructor stub
	}
	public int minus() {return this.v1-v2;}
}
public class JavaInheritanceStudy {
	public static void main(String[] args) {
		cal c = new cal(2, 1);
		cal3 c3 = new cal3(2, 1);
		System.out.println(c3.sum());
		System.out.println(c3.minus());
	}

}
